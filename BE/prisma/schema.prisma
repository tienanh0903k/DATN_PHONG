datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model Account {
  accountId        Int      @id @default(autoincrement())
  accountTypeId    Int
  userName         String
  password         String
  status           String
  Salt             String
  Customer         Customer?
  AccountType      AccountType @relation(fields: [accountTypeId], references: [accountTypeId])
}

model AccountType {
  accountTypeId    Int      @id @default(autoincrement())
  accountTypeName  String
  Account          Account[]
}
model Customer {
  customerId       Int      @id @default(autoincrement())
  accountId        Int      @unique
  customerName     String
  nickName         String?
  avatar           String?
  email            String
  numberPhone      String?
  birthday         DateTime
  address          String
  gender           String
  status           String
  Account          Account? @relation(fields: [accountId], references: [accountId])
  Bill             Bill[]
  Follower         Follower[]
  DeliveryAddress  DeliveryAddress[]
  Notification     Notification[]
  Rating           Rating[]
  Shop            Shop?
  Cart             Cart[]
  Message          Message[]
}


model Categories {
  categoryId       Int      @id @default(autoincrement())
  categoryName     String
  parentCategoryId Int?
  status           String
  Products         Products[]
  VariantType      VariantType[]
}



model DeliveryAddress {
  addressId        Int      @id @default(autoincrement())
  customerId       Int
  addressDetail    String
  Customer         Customer @relation(fields: [customerId], references: [customerId])
}

model Follower {
  followerId       Int      @id @default(autoincrement())
  customerId       Int
  shopId           Int
  createAt         DateTime @default(now())
  Customer         Customer @relation(fields: [customerId], references: [customerId])
  Shop             Shop @relation(fields: [shopId], references: [shopId])
}

model Notification {
  notifyId         Int      @id @default(autoincrement())
  notifyTypeId     Int
  customerId       Int
  notifyName       String
  sentAt           DateTime @default(now())
  status           String
  Customer         Customer @relation(fields: [customerId], references: [customerId])
  NotificationType NotificationType @relation(fields: [notifyTypeId], references: [notifyTypeId])
}

model NotificationType {
  notifyTypeId     Int      @id @default(autoincrement())
  notifyTypeName   String
  Notification     Notification[]
}

model Products {
  productId        Int      @id @default(autoincrement())
  productName      String
  categoryId       Int
  productDes       String   @db.Text
  shopId           Int
  img              String
  price            Float
  status           String @default("pending")
  Categories       Categories @relation(fields: [categoryId], references: [categoryId])
  Shop             Shop @relation(fields: [shopId], references: [shopId])
  ProductVariant   ProductVariant[]
}

model ProductVariant {
  id               Int      @id @default(autoincrement())
  productId        Int
  typeValueId      Int
  quantity         Int
  img              String
  price            Float
  Products         Products @relation(fields: [productId], references: [productId])
  BillDetail       BillDetail[]
  VariantValue     VariantValue @relation(fields: [typeValueId], references: [typeValueId])
  Cart             Cart[]
}

model Cart {
  cartId           Int      @id @default(autoincrement())
  id               Int
  customerId       Int
  quantity         Int
  ProductVariant   ProductVariant @relation(fields: [id], references: [id])
  Customer         Customer @relation(fields: [customerId], references: [customerId])
}

model VariantType {
  typeId           Int      @id @default(autoincrement())
  typeName         String
  categoryId       Int
  Categories       Categories @relation(fields: [categoryId], references: [categoryId])
  VariantValue     VariantValue[]
}

model VariantValue {
  typeValueId      Int      @id @default(autoincrement())
  typeId           Int
  typeValue        String
  VariantType      VariantType @relation(fields: [typeId], references: [typeId])
  ProductVariant   ProductVariant[]
}
model Shop {
  shopId           Int      @id @default(autoincrement())
  customerId       Int      @unique
  shopName         String
  shopAddress      String
  shopAvatar       String?
  shopBanner       String?
  shopNumberPhone  String
  emailShop        String
  totalSales       Int
  totalProduct     Int
  status           String
  Customer         Customer @relation(fields: [customerId], references: [customerId])
  Products         Products[]
  Follower         Follower[]
  Message          Message[]
}
model Message {
  messageId     Int       @id @default(autoincrement())
  senderId      Int                    
  senderType    SenderType             
  customerId    Int?                      
  shopId        Int?                     
  content       String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())


  Customer      Customer? @relation(fields: [customerId], references: [customerId])
  Shop          Shop?     @relation(fields: [shopId], references: [shopId])
}

enum SenderType {
  CUSTOMER
  SHOP
}
model Bill {
  billId           Int      @id @default(autoincrement())
  customerId       Int
  numberPhone      String
  address          String
  statusId         Int
  createAt         DateTime @default(now())
  BillDetail       BillDetail[]
  Customer         Customer @relation(fields: [customerId], references: [customerId])
  StatusBill       StatusBill @relation(fields: [statusId], references: [statusId])
}
model StatusBill {
  statusId         Int      @id @default(autoincrement())
  statusName       String
  Bill             Bill[]
}
model BillDetail {
  billDetailId     Int      @id @default(autoincrement())
  billId           Int
  id               Int
  quantity         Int
  totalPrice       Float
  Bill             Bill @relation(fields: [billId], references: [billId])
  ProductVariant   ProductVariant @relation(fields: [id], references: [id])
  Rating           Rating?
}
model Rating {
  ratingId         Int      @id @default(autoincrement())
  billDetailId     Int      @unique
  customerId       Int
  ratingValue      Int
  comment          String
  status           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  BillDetail       BillDetail @relation(fields: [billDetailId], references: [billDetailId])
  Customer         Customer @relation(fields: [customerId], references: [customerId])
}



